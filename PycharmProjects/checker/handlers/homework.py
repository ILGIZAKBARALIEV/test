from aiogram import Router, F, types
import logging
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
homework_router = Router()

database = Database("db.sqlite3")


class HomeworkForm(StatesGroup):
    name = State()
    number = State()
    content = State()

@homework_router.message(Command("start"))
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="submit_homework"),
        ]]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üìö\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.",
        reply_markup=kb
    )

@homework_router.callback_query(F.data == "submit_homework")
async def submit_homework(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(HomeworkForm.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()


@homework_router.message(HomeworkForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(HomeworkForm.number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ—Ç 1 –¥–æ 8):")


@homework_router.message(HomeworkForm.number, F.text.in_(["1", "2", "3", "4", "5", "6", "7", "8"]))
async def process_number(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.set_state(HomeworkForm.content)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub:")

@homework_router.message(HomeworkForm.content, F.text | F.document)
async def process_homework(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    number = data["number"]

    if message.document:
        content = f"–§–∞–π–ª: {message.document.file_id}"
    else:
        content = message.text

    try:
        homework_data = {
            "name": name,
            "hw_number": number,
            "github": content
        }
        database.save_homework(homework_data)
        await state.clear()
        await message.answer("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
